
uart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000017e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090b  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083b  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e7  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041d  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e7       	ldi	r30, 0x7E	; 126
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	62 c0       	rjmp	.+196    	; 0x17a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define F_CPU 8000000L
#include <util/delay.h>
#include <string.h>

int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	a2 97       	sbiw	r28, 0x22	; 34
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	UCSR1B |= (1 << TXEN1)|(1 << RXEN1);
  cc:	ea e9       	ldi	r30, 0x9A	; 154
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
	UBRR1L = 51;
  d6:	83 e3       	ldi	r24, 0x33	; 51
  d8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	char hello[] = "Hello worldadlsfhalsdhgljdfagbp\r\n";	
  dc:	82 e2       	ldi	r24, 0x22	; 34
  de:	e0 e0       	ldi	r30, 0x00	; 0
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x2e>
	DDRG |= (1 << 3);
  ee:	e4 e6       	ldi	r30, 0x64	; 100
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	80 83       	st	Z, r24
	
    while (1) 
    {
		for(int i = 0; i < strlen(hello); i++){
  f8:	ae 01       	movw	r20, r28
  fa:	4f 5f       	subi	r20, 0xFF	; 255
  fc:	5f 4f       	sbci	r21, 0xFF	; 255
			UDR1 = hello[i];
  fe:	0c e9       	ldi	r16, 0x9C	; 156
 100:	10 e0       	ldi	r17, 0x00	; 0
			while(!(UCSR1A & (1 << UDRE1)));
 102:	eb e9       	ldi	r30, 0x9B	; 155
 104:	f0 e0       	ldi	r31, 0x00	; 0
		}
		PORTG |= (1 << 3);
 106:	0f 2e       	mov	r0, r31
 108:	f5 e6       	ldi	r31, 0x65	; 101
 10a:	ef 2e       	mov	r14, r31
 10c:	f1 2c       	mov	r15, r1
 10e:	f0 2d       	mov	r31, r0
 110:	be 01       	movw	r22, r28
 112:	6f 5f       	subi	r22, 0xFF	; 255
 114:	7f 4f       	sbci	r23, 0xFF	; 255
	char hello[] = "Hello worldadlsfhalsdhgljdfagbp\r\n";	
	DDRG |= (1 << 3);
	
    while (1) 
    {
		for(int i = 0; i < strlen(hello); i++){
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	0a c0       	rjmp	.+20     	; 0x130 <main+0x78>
			UDR1 = hello[i];
 11c:	db 01       	movw	r26, r22
 11e:	8d 91       	ld	r24, X+
 120:	bd 01       	movw	r22, r26
 122:	d8 01       	movw	r26, r16
 124:	8c 93       	st	X, r24
			while(!(UCSR1A & (1 << UDRE1)));
 126:	80 81       	ld	r24, Z
 128:	85 ff       	sbrs	r24, 5
 12a:	fd cf       	rjmp	.-6      	; 0x126 <main+0x6e>
	char hello[] = "Hello worldadlsfhalsdhgljdfagbp\r\n";	
	DDRG |= (1 << 3);
	
    while (1) 
    {
		for(int i = 0; i < strlen(hello); i++){
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	da 01       	movw	r26, r20
 132:	0d 90       	ld	r0, X+
 134:	00 20       	and	r0, r0
 136:	e9 f7       	brne	.-6      	; 0x132 <main+0x7a>
 138:	11 97       	sbiw	r26, 0x01	; 1
 13a:	a4 1b       	sub	r26, r20
 13c:	b5 0b       	sbc	r27, r21
 13e:	2a 17       	cp	r18, r26
 140:	3b 07       	cpc	r19, r27
 142:	60 f3       	brcs	.-40     	; 0x11c <main+0x64>
			UDR1 = hello[i];
			while(!(UCSR1A & (1 << UDRE1)));
		}
		PORTG |= (1 << 3);
 144:	d7 01       	movw	r26, r14
 146:	8c 91       	ld	r24, X
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	bf ef       	ldi	r27, 0xFF	; 255
 14e:	24 e3       	ldi	r18, 0x34	; 52
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	b1 50       	subi	r27, 0x01	; 1
 154:	20 40       	sbci	r18, 0x00	; 0
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x9a>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xa4>
 15c:	00 00       	nop
		_delay_ms(500);
		PORTG &= ~(1 << 3);
 15e:	d7 01       	movw	r26, r14
 160:	8c 91       	ld	r24, X
 162:	87 7f       	andi	r24, 0xF7	; 247
 164:	8c 93       	st	X, r24
 166:	bf ef       	ldi	r27, 0xFF	; 255
 168:	24 e3       	ldi	r18, 0x34	; 52
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	b1 50       	subi	r27, 0x01	; 1
 16e:	20 40       	sbci	r18, 0x00	; 0
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0xb4>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0xbe>
 176:	00 00       	nop
 178:	cb cf       	rjmp	.-106    	; 0x110 <main+0x58>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
